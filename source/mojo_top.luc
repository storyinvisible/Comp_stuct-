module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8] ,   // DIP switches on IO Shield
    
    input iput[2],          // the two input , sum and carry from the full adder circuit 
    output oput[3]          // the out put a , b and c 

  ) {
  
  sig rst;                  // reset signal

  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
    finite_machine finite_machine; //  nest the finite_machine into the reset and clock 
    dff counter[28];  // nest the counter in the reset and clock so when state is reset, the counter is rest too. 
      
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
 
    finite_machine.timer=counter.q;   // assign the current counter value to timer 
    if (io_dip[0][7]){           // the dip switch [0][7] will be used to swtich from auto to mannual mode and vice vesa 
      finite_machine.test=1b1;
      oput=finite_machine.current[3:0];
      io_led[0][4:0]=finite_machine.current;
      finite_machine.answer=iput;

    }
    else{
     reset_cond.in = ~rst_n; // input raw inverted reset signal
      rst = reset_cond.out;   // conditioned reset
      finite_machine.test=1b0;          // ask the state machine not to move to the testing phase 
      finite_machine.answer=2b00;      // receive default asnwer of 00
      oput=io_dip[0][3:0];              // use the dip switch to simulate output 

      }
    counter.d=counter.q+1;  // the inrease the counter per clock cycle 

    
  }
 
}