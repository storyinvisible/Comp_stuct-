/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    input [1:0] iput,
    input sum,
    output reg [2:0] oput
  );
  
  
  
  reg rst;
  
  wire [2-1:0] M_adder_answer;
  reg [3-1:0] M_adder_in;
  adder_1 adder (
    .in(M_adder_in),
    .answer(M_adder_answer)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [4-1:0] M_finite_machine_current;
  reg [2-1:0] M_finite_machine_answer;
  reg [1-1:0] M_finite_machine_test;
  reg [28-1:0] M_finite_machine_timer;
  finite_machine_3 finite_machine (
    .clk(clk),
    .rst(rst),
    .answer(M_finite_machine_answer),
    .test(M_finite_machine_test),
    .timer(M_finite_machine_timer),
    .current(M_finite_machine_current)
  );
  reg [27:0] M_counter_d, M_counter_q = 1'h0;
  
  always @* begin
    M_counter_d = M_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_adder_in = 3'h0;
    M_finite_machine_timer = M_counter_q;
    if (io_dip[0+7+0-:1]) begin
      M_finite_machine_test = 1'h1;
      oput = M_finite_machine_current[0+3-:4];
      io_led[0+0+4-:5] = M_finite_machine_current;
      M_finite_machine_answer = iput;
    end else begin
      M_reset_cond_in = ~rst_n;
      rst = M_reset_cond_out;
      M_finite_machine_test = 1'h0;
      M_finite_machine_answer = 2'h0;
      oput = io_dip[0+0+3-:4];
      M_adder_in = io_dip[0+0+3-:4];
      if (iput == M_adder_answer) begin
        io_sel[0+0-:1] = 1'h1;
        io_seg = 8'hda;
      end
    end
    M_counter_d = M_counter_q + 1'h1;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
endmodule
