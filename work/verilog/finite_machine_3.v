/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module finite_machine_3 (
    input clk,
    input rst,
    output reg [3:0] current,
    input [1:0] answer,
    input test,
    input [27:0] timer
  );
  
  
  
  wire [2-1:0] M_add_answer;
  reg [3-1:0] M_add_in;
  adder_1 add (
    .in(M_add_in),
    .answer(M_add_answer)
  );
  
  localparam IDLE_state = 4'd0;
  localparam ONE_state = 4'd1;
  localparam TWO_state = 4'd2;
  localparam THREE_state = 4'd3;
  localparam FOUR_state = 4'd4;
  localparam FIVE_state = 4'd5;
  localparam SIX_state = 4'd6;
  localparam SEVEN_state = 4'd7;
  localparam EIGHT_state = 4'd8;
  localparam PASS_state = 4'd9;
  localparam FAIL_state = 4'd10;
  
  reg [3:0] M_state_d, M_state_q = IDLE_state;
  
  integer cur;
  
  always @* begin
    M_state_d = M_state_q;
    
    current = cur;
    M_add_in = 3'h0;
    
    case (M_state_q)
      PASS_state: begin
        M_state_d = PASS_state;
        cur = 4'hf;
      end
      IDLE_state: begin
        if (test) begin
          M_state_d = ONE_state;
          cur = 4'h0;
        end
      end
      ONE_state: begin
        current = 4'h0;
        M_add_in = 3'h0;
        if (M_add_answer == answer && timer == 7'h7f) begin
          M_state_d = TWO_state;
          current = 4'h1;
        end
      end
      TWO_state: begin
        current = 4'h1;
        M_add_in = 3'h1;
        if (M_add_answer == answer && timer == 7'h7f) begin
          M_state_d = THREE_state;
          current = 4'h2;
        end
      end
      THREE_state: begin
        current = 4'h2;
        M_add_in = 3'h2;
        if (M_add_answer == answer && timer == 7'h7f) begin
          M_state_d = FOUR_state;
          current = 4'h4;
        end
      end
      FOUR_state: begin
        current = 4'h4;
        M_add_in = 3'h4;
        if (M_add_answer == answer && timer == 7'h7f) begin
          M_state_d = FIVE_state;
          current = 4'h4;
        end
      end
      FIVE_state: begin
        current = 4'h6;
        M_add_in = 3'h6;
        if (M_add_answer == answer && timer == 7'h7f) begin
          M_state_d = SIX_state;
          current = 4'h5;
        end
      end
      SIX_state: begin
        current = 4'h5;
        M_add_in = 3'h5;
        if (M_add_answer == answer && timer == 7'h7f) begin
          M_state_d = SEVEN_state;
          current = 4'h5;
        end
      end
      SEVEN_state: begin
        current = 4'h3;
        current = 4'h3;
        M_add_in = 3'h3;
        if (M_add_answer == answer && timer == 7'h7f) begin
          M_state_d = EIGHT_state;
          current = 4'h7;
        end
      end
      EIGHT_state: begin
        current = 4'h7;
        M_add_in = 3'h7;
        if (M_add_answer == answer && timer == 7'h7f) begin
          M_state_d = PASS_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
